# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OWo4606KQqrpkLi2het19MK9sl2jTGrh
"""

import pandas as pd 
import numpy as np
from sklearn import svm

from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split

from sklearn.impute import SimpleImputer

! pip install -q kaggle

from google.colab import files 
 files.upload()

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

! kaggle competitions download -c titanic

df = pd.read_csv('/content/train.csv')

df.head()

df.describe()

df.isna().sum()

df = df.drop(columns = ['Cabin', 'Name','PassengerId','Ticket'])

df.head()

df.isna().sum()

for col in df:
  print(col + '\t' + str(df[col].nunique()))

df.describe()

Y = df['Survived']
X = df.drop(['Survived'],axis=1)
# another way of splitting the data
# Y = df.iloc[:,0]
# x = df.iloc[:,1:]

print(Y)

print(X)

# le = LabelEncoder()

# le.fit_transform(X['Sex'])

embarked_mapping = {"S": 1, "C": 2, "Q": 3}
sex_mapping = {"male": 0, "female": 1}

X['Embarked'] = X['Embarked'].map(embarked_mapping) 
X['Sex'] = X['Sex'].map(sex_mapping)

X

sc = StandardScaler()

X['Fare'] = sc.fit_transform(np.reshape(X['Fare'].values,(-1,1)))

X

X

# df['Embarked'].mode()[0]

imputer = SimpleImputer(missing_values=np.nan,strategy='most_frequent')

X['Embarked'] = imputer.fit_transform(np.reshape(X['Embarked'].values, (-1,1)))

X['Age'] = imputer.fit_transform(np.reshape(X['Age'].values, (-1,1))) #maybe use pd.DataFrame()

X.isna().sum()

X

for col in df:
  print(col + '\t' + str(df[col].nunique()))

X['Age'] = sc.fit_transform(np.reshape(X['Age'].values,(-1,1)))

df_test = pd.read_csv('/content/test.csv')

df_test2 = pd.read_csv('/content/test.csv')

df_test

df_test.isna().sum()

df_test = df_test.drop(columns = ['PassengerId','Name','Cabin','Ticket'])

df_test

df_test.describe()

for col in df_test:
  print(col + '\t' + str(df_test[col].nunique()))

df_test['Fare'] = imputer.fit_transform(np.reshape(df_test['Fare'].values, (-1,1)))
df_test['Age'] = imputer.fit_transform(np.reshape(df_test['Age'].values, (-1,1)))

df_test.isna().sum()

df_test['Sex'] = df_test['Sex'].map(sex_mapping)
df_test['Embarked'] = df_test['Embarked'].map(embarked_mapping)

df_test

df_test[['Age', 'Fare', 'Parch', 'SibSp']] = sc.fit_transform(df_test[['Age', 'Fare', 'Parch', 'SibSp']])

df_test

prediction = sv.predict(df_test)

output = pd.DataFrame({'PassengerId': df_test2.PassengerId, 'Survived': prediction})

output.to_csv('my_submission.csv', index= False)



x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 42)

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

print(x_train)

sv = svm.SVC()

x_train

sv.fit(x_train,y_train)
predict = sv.predict(x_test)

from sklearn.metrics import confusion_matrix, classification_report

print(classification_report(y_test,predict))

from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier()

rfc = rfc.fit(x_train,y_train)
prdc = rfc.predict(x_test)

print(classification_report(y_test,prdc))

import tensorflow as tf

#we build our model
model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Dense(128, activation = tf.nn.relu, input_shape=(712, 7)))
model.add(tf.keras.layers.Dense(128, activation = tf.nn.relu))
model.add(tf.keras.layers.Dense(64, activation = tf.nn.relu))
model.add(tf.keras.layers.Dense(32, activation = tf.nn.relu))
model.add(tf.keras.layers.Dense(1, activation = tf.nn.sigmoid))

model.compile(optimizer= 'adam',
              loss = 'binary_crossentropy',
              metrics = ['accuracy'])

model.summary()

model.fit(x_train, y_train, epochs = 20)

model.evaluate(x_test,y_test)